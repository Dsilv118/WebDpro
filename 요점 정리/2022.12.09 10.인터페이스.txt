2022.12.09 요점정리

10. 인터페이스

● 인터페이스 
인터페이스란? 
* 작업명세서(작업지시서) - "앞으로 이렇게 만들어요"라고 표현해 놓은 것
* 다형성을 가능하게 한다(하나의 객체를 다양하게 많은 type으로 만들 수 있다.)
* 객체를 부속품화 - 다양한 객체를 제품의 부속품처럼 개발자 마음대로 변결 할 수 있다.
* 사용법은 어렵지 않지만, 실제 개발에 적용시키기는 쉽지 않다.
* 인터페이스를 공부하는데 가장 좋은 방법은 패턴이나 프레임워크(ex. Spring)를 통해 습득하는 것

◎ 인터페이스의 문법
* 'class'대신 'interface' 예약어를 사용한다는 점에서 클래스와 유사 
* 실제 구현된 기능 없이 추상메소드와 상수만이 존재
* private는 불가 - 상수나 메소드를 만들 때 private 접근 제한자는 불가 
* 변수 타입 - 인터페이스는 객체를 생성할 수 없다. 다만, 변수 타입으로만 사용 됩니다.
                 (예외, 익명 구현 객체만이 가능은 하다. 안드로이드에서 주로)
* 구현은 Implement 되는 클래스에서 합니다.

◎ 다형성이란? 
여러가지 형태를 가질 수 있는 능력 
말 그대로 객체가 다양하게 변할 수 있다고 생각하면 됩니다.
* 하나의 인터페이스를 사용하여 다양한 구현 방법을 제공
* 하나의 클래스나 함수가 다양하게 동직하는 것.

◎ 인터페이스의 장점
* 개발시간을 단축시킬 수 있다.
* 표준화가 가능하다.
* 서로 관계없는 클래스에게 관계를 맺어 줄 수 있다.
* 독립적인 프로그래밍이 가능하다.

◎ 인터페이스와 추상클래스
* 추상메소드를 가지고 있습니다.
* 변수 타입이 목적입니다. 
* 객체 생성이 불가합니다. anonymose(익명클래스)를 이용할 수 있습니다.

◎ default 메소드와 인터페이스의 확장
기존 인터페이스의 이름과 추상 메소드의 변경 없이 디폴트 메소드만 추가할 수 있기 때문에 
이전에 개발한 구현 클래스를 그대로 사용할 수 있으면서 새롭게 개발하는 클래스는 
디폴트 메소드를 활용할 수 있다.

